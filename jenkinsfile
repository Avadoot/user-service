node {
    checkout scm

    stage('abort-on-maven-release-commit') {
        def latestCommitMessage = sh script: 'git log -n 1 --pretty=format:"%s"', returnStdout: true
        if (latestCommitMessage == '[maven-release-plugin] prepare for next development iteration') {
            currentBuild.result = 'ABORTED'
            return
        }
    }

    stage('Build & Test') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            sh 'mvn clean install -Dpact.verifier.publishResults=false'
        }
    }

    stage('build and release artifact') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            sh 'mvn -Dresume=false -DdryRun=true release:prepare -Darguments="-DskipTests"'
            sh 'mvn -Dresume=false release:prepare release:perform -Darguments="-DskipTests"'
        }
    }

    stage('Publish Pact verification results') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            // extract version number
            def artifactFile = findFiles glob: 'target/user-service*.jar'
            def versionNo = artifactFile[0].name.minus("user-service-").minus(".jar")

            sh "mvn clean install -Dpact.provider.version=${versionNo}"
        }
    }
}