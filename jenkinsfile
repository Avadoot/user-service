node {
    checkout scm

    stage('abort-on-maven-release-commit') {
        def latestCommitMessage = sh script: 'git log -n 1 --pretty=format:"%s"', returnStdout: true
        if (latestCommitMessage == '[maven-release-plugin] prepare for next development iteration') {
            currentBuild.result = 'ABORTED'
            return
        }
    }

    stage('Build & Test') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            sh 'mvn clean install -Dpact.verifier.publishResults=false'
        }
    }

    stage('build and release artifact') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            sh 'mvn -Dresume=false -DdryRun=true release:prepare -Darguments="-DskipTests"'
            sh 'mvn -Dresume=false release:prepare release:perform -Darguments="-DskipTests"'
        }
    }

    stage('Publish Pact verification results') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            // extract version number
            def artifactFile = findFiles glob: 'target/user-service*.jar'
            def versionNo = artifactFile[0].name.minus("user-service-").minus(".jar")

            // publish verification result to pact broker - It might be possible to extract it in a function.
            def response = httpRequest "http://broker_app/pacts/provider/user_service/consumer/order_service/latest"
            if(response.status == 200) {
                def props = readJSON text: response.content
                def publishUrl = props._links["pb:publish-verification-results"].href

                httpRequest customHeaders: [[maskValue: false, name: 'Content-Type', value: 'application/json']], httpMode: 'POST', requestBody: """{
                                  "success": true,
                                  "providerApplicationVersion": "${versionNo}"
                                }""", url: publishUrl

            } else if (response.status != 404) {
                currentBuild.result = 'FAILURE'
            }


            def devResponse = httpRequest "http://broker_app/pacts/provider/user_service/consumer/order_service/DEV"
            if(devResponse.status == 200) {
                def props = readJSON text: devResponse.content
                def publishUrl = props._links["pb:publish-verification-results"].href

                httpRequest customHeaders: [[maskValue: false, name: 'Content-Type', value: 'application/json']], httpMode: 'POST', requestBody: """{
                                  "success": true,
                                  "providerApplicationVersion": "${versionNo}"
                                }""", url: publishUrl

            } else if (devResponse.status != 404) {
                currentBuild.result = 'FAILURE'
            }


            def prodResponse = httpRequest "http://broker_app/pacts/provider/user_service/consumer/order_service/PROD"
            if(prodResponse.status == 200) {
                def props = readJSON text: prodResponse.content
                def publishUrl = props._links["pb:publish-verification-results"].href

                httpRequest customHeaders: [[maskValue: false, name: 'Content-Type', value: 'application/json']], httpMode: 'POST', requestBody: """{
                                  "success": true,
                                  "providerApplicationVersion": "${versionNo}"
                                }""", url: publishUrl

            } else if (prodResponse.status != 404) {
                currentBuild.result = 'FAILURE'
            }
        }
    }

    stage('Deploy') {
        if(currentBuild.result != 'ABORTED' && currentBuild.result != 'FAILURE') {
            echo 'deploy'
        }
    }
}